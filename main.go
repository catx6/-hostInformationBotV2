package main


import (
    "fmt"
    "log"
    "os"
    "time"

    tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
    "github.com/shirou/gopsutil/v3/cpu"
    "github.com/shirou/gopsutil/v3/disk"
    "github.com/shirou/gopsutil/v3/mem"
    "github.com/shirou/gopsutil/v3/host"
)

var (
    allowedAccounts = map[int64]bool{
        : true,
        : true,
    }
    blockedUsers = make(map[int64]bool)
)
var admin int = 

func getRAMInfo() string {
    v, err := mem.VirtualMemory()
    if err != nil {
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –û–ó–£"
    }
    return fmt.Sprintf("Total: %.2f GB\nUsed: %.2f GB\nFree: %.2f GB\nUsedPercent: %.2f%%",
        float64(v.Total)/1e9,
        float64(v.Used)/1e9,
        float64(v.Available)/1e9,
        v.UsedPercent)
}

func getCPUInfo() string {
    loads, err := cpu.Percent(0, false)
    if err != nil || len(loads) == 0 {
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ CPU"
    }
    info, err := cpu.Counts(true)
    if err != nil {
        info = 0
    }
    return fmt.Sprintf("Cores: %d\nUsage: %.2f%%", info, loads[0])
}

func getDiskInfo() string {
    usage, err := disk.Usage("/")
    if err != nil {
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–µ"
    }
    return fmt.Sprintf("Total: %.2f GB\nUsed: %.2f GB\nFree: %.2f GB\nUsedPercent: %.2f%%",
        float64(usage.Total)/1e9,
        float64(usage.Used)/1e9,
        float64(usage.Free)/1e9,
        usage.UsedPercent)
}

func getSysInfo() string {
    info, err := host.Info()
    if err != nil {
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
    }
    return fmt.Sprintf("OS: %s\nPlatform: %s\nPlatform Version: %s\nKernel Version: %s\nHost: %s",
        info.OS, info.Platform, info.PlatformVersion, info.KernelVersion, info.Hostname)
}

func main() {
    token := os.Getenv("TELEGRAM_BOT_TOKEN")
    if token == "" {
        log.Fatal("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    }

    bot, err := tgbotapi.NewBotAPI(token)
    if err != nil {
        log.Fatal(err)
    }

    u := tgbotapi.NewUpdate(0)
    u.Timeout = 60

    updates := bot.GetUpdatesChan(u)

    for update := range updates {
        if update.Message == nil {
            continue
        }

        userID := update.Message.Chat.ID

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à—ë–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if !allowedAccounts[userID] {
            if !blockedUsers[userID] {
                blockedUsers[userID] = true
                bot.Send(tgbotapi.NewMessage(userID, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"))
                bot.Send(tgbotapi.NewMessage(admin, fmt.Sprintf("–ó–∞–ø—Ä–æ—Å –æ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %d", userID)))
            }
            continue
        }

        text := update.Message.Text

        switch text {
        case "/start", "/help":
            bot.Send(tgbotapi.NewMessage(userID, "‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã /ram /cpu /disk /sysinfo"))
        case "/ram":
            bot.Send(tgbotapi.NewMessage(userID, "üíæ –û–ó–£:\n"+getRAMInfo()))
        case "/cpu":
            bot.Send(tgbotapi.NewMessage(userID, "üñ•Ô∏è CPU:\n"+getCPUInfo()))
        case "/disk":
            bot.Send(tgbotapi.NewMessage(userID, "üì¶ –î–∏—Å–∫:\n"+getDiskInfo()))
        case "/sysinfo":
            bot.Send(tgbotapi.NewMessage(userID, "üß∞ –°–∏—Å—Ç–µ–º–∞:\n"+getSysInfo()))
        default:
            bot.Send(tgbotapi.NewMessage(userID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start –∏–ª–∏ /help"))
        }

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≥—Ä—É–∑–∫–∏ (–º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –≥–æ—Ä—É—Ç–∏–Ω–µ)
        v, _ := mem.VirtualMemory()
        c, _ := cpu.Percent(0, false)

        if v.UsedPercent > 86 {
            for id := range allowedAccounts {
                bot.Send(tgbotapi.NewMessage(id, fmt.Sprintf("–û–ó–£ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ %.2f%% - –∫—Ä–∏—Ç–∏—á–Ω–æ!", v.UsedPercent)))
            }
        }
        if len(c) > 0 && c[0] > 92 {
            for id := range allowedAccounts {
                bot.Send(tgbotapi.NewMessage(id, fmt.Sprintf("–ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫—Ä–∏—Ç–∏—á–Ω–∞: %.2f%%", c[0])))
            }
        }

        // –ß—Ç–æ–±—ã –Ω–µ –∂—Ä–∞—Ç—å CPU - –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        time.Sleep(500 * time.Millisecond)
    }
}
